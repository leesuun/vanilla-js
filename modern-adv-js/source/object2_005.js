// 자바스크립트 프로토타입 상속


// [1] : 자바스크립트는 객체지향 언어인가?
// 그렇다. --> 다만 다른 언어와는 달리 프로토타입 상속에 기반을 둔 OOP  언어. --> Class 문법이 지원. --> 다른 언어와 비슷.
// 프로토타입 상속을 이해하기 위해서는 --> 앞서 배운 내용들에 선학습이 잘 기억되어 있어야 한다.


// [2] : 상속의 필요성
// 가장 큰 목적 --> 재사용
// 이미 부모쪽에서 정의된 속성과 메서드를 그대로 물려받아 재사용할 수 있다. --> 큰 장점.
// 뿐만 아니라, 새로운 기능을 추가해서 기존 기능에서 더 확장시킬 수도 있다. --> 큰 장점.
// 한마디로, 중복해서 또 작성하지 않아서 좋고, 필요에 따라서는 더 확장도 가능.


// [3] : 프로토타입 체인
// __proto__ --> 상속을 해준 부모(원형)를 가리킴(참조).
// 이 말은 자식 객체가 __proto__ 가 가리키는 부모 객체의 멤버(속성, 메서드)를 사용할 수 있다. --> 즉, 상속 받았다.
let obj1 = {
	name: "홍길동",
	age: 20,
	sayHi: function() { console.log( "Hi~ " + this.name ); }
};

let obj2 = {
	name: "이순신"
};

// 여기서 문제? --> obj2 객체의 __proto__ 속성이 가리키는 것은?
console.log( obj2 );  // Object(최상위)
console.log( obj2.name );  // 이순신

// 여기서 또 문제? --> 그럼 __proto__ 속성이 가리키는 것을 바꿀 수 있는가? --> Yes
obj2.__proto__ = obj1;
console.log( obj2 );  				// obj1 (부모) --> obj1이 가지는 멤버를 사용할 수 있게 됨.
console.log( obj2.name );		// 이순신 --> 얘가 출력된 이유는 obj2 객체내에 name 속성이 있으니깐 부모까지 찾으러 안가고 출력.
console.log( obj2.age );			// 20 --> 얘가 출력된 이유는 obj2 객체내에 age 속성이 없으니깐 부모까지 찾아 올라감.
obj2.sayHi();					// Hi~ 이순신
















